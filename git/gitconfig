# set your user tokens as environment variables, such as ~/.secrets
# See the README for examples.
[color]
  ui = true
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red
  new = green
[alias]
  # add
  a = add                           # add
  chunkyadd = add --patch           # stage commits chunk by chunk
  # Shows list of contributors of a repository.
  contributors = shortlog --summary --numbered --email

  # via http://philjackson.github.io/2013/04/07/handy-git-tips-to-stop-you-getting-fired.html
  snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
  snapshots = !git stash list --grep snapshot

  #via http://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit
  recent-branches = !git for-each-ref --count=15 --sort=-committerdate refs/heads/ --format='%(refname:short)'

  # branch
  b = branch -v                     # branch (verbose)

  # commit
  c = commit -m                     # commit with message
  ca = commit -am                   # commit all with message
  ci = commit                       # commit
  amend = commit --amend            # ammend your last commit
  ammend = commit --amend           # ammend your last commit

  # checkout
  co = checkout                     # checkout
  nb = checkout -b                  # create and switch to a new branch (mnemonic: "git new branch branchname...")

  # cherry-pick
  cp = cherry-pick -x               # grab a change from a branch

  # diff
  d = diff                          # diff unstaged changes
  dc = diff --cached                # diff staged changes
  last = diff HEAD^                 # diff last committed change

  # log
  # l = log --graph --date=short
  changes = log --pretty=format:"%h %cr %cn %Cgreen%s%Creset" --name-status
  short = log --pretty=format:"%h %cr %cn %Cgreen%s%Creset"
  simple = log --pretty=format:" * %s"
  shortnocolor = log --pretty=format:"%h %cr %cn %s"

  # pull
  pl = pull                         # pull

  # push
  ps = push                         # push

  # rebase
  rc = rebase --continue            # continue rebase
  rs = rebase --skip                # skip rebase

  # remote
  rv = remote -v                     # show remotes (verbose)

  # reset
  unstage = reset HEAD              # remove files from index (tracking)
  uncommit = reset --soft HEAD^     # go back before last commit, with files in uncommitted state
  filelog = log -u                  # show changes to a file
  mt = mergetool                    # fire up the merge tool

  # stash
  ss = stash                        # stash changes
  sl = stash list                   # list stashes
  sa = stash apply                  # apply stash (restore changes)
  sd = stash drop                   # drop stashes (destory changes)

  # status
  s = status                        # status
  st = status                       # status
  stat = status                     # status

  # tag
  t = tag -n                        # show tags with <n> lines of each tag message

  # svn helpers
  svnr = svn rebase
  svnd = svn dcommit
  svnl = svn log --oneline --show-commit
  a = add                           # add
  chunkyadd = add --patch           # stage commits chunk by chunk

  # via http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
  snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
  snapshots = !git stash list --grep snapshot

  #via http://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit
  recent-branches = !git for-each-ref --count=15 --sort=-committerdate refs/heads/ --format='%(refname:short)'

  # branch
  # b = "branch -v"                       # branch (verbose)

  # commit
  c = commit -m                       # commit with message
  ca = commit -a                      # commit all
  ci = commit                         # commit
  amend = commit -a --amend           # amend your last commit
  fixup = commit -a --amend --no-edit # amend your last commit without changing the message

  # checkout
  co = checkout                       # checkout
  nb = checkout -b                    # create and switch to a new branch (mnemonic: "git new branch branchname...")

  # cherry-pick
  cp = cherry-pick -x                 # grab a change from a branch

  # diff
  # d = "diff"                            # diff unstaged changes
  dc = diff --cached                  # diff staged changes
  last = diff HEAD^                   # diff last committed change

  # log
  # l = "log --graph --date=short"
  changes = log --pretty=format:"%h %cr %cn %Cgreen%s%Creset" --name-status
  short = log --pretty=format:"%h %cr %cn %Cgreen%s%Creset"
  simple = log --pretty=format:" * %s"
  shortnocolor = log --pretty=format:"%h %cr %cn %s"

  # pull
  pl = pull                         # pull

  # push
  pu = push --set-upstream origin HEAD # push & set upstream
  ps = push                            # push
  pf = push -f                         # push w/ force

  # rebase
  rc = rebase --continue            # continue rebase
  rs = rebase --skip                # skip rebase

  # remote
  rv = remote -v                     # show remotes (verbose)

  # reset
  unstage = reset HEAD              # remove files from index (tracking)
  uncommit = reset --soft HEAD^     # go back before last commit, with files in uncommitted state
  filelog = log -u                  # show changes to a file
  mt = mergetool                    # fire up the merge tool

  # stash
  ss = stash                        # stash changes
  sl = stash list                   # list stashes
  sa = stash apply                  # apply stash (restore changes)
  sd = stash drop                   # drop stashes (destory changes)

  # status
  # s = "status"                        # status
  st = status                       # status
  stat = status                     # status

  # tag
  t = tag -n                        # show tags with <n> lines of each tag message

  # svn helpers
  svnr = svn rebase
  svnd = svn dcommit
  svnl = svn log --oneline --show-commit

  undo = !git add -A && git commit -qm \"UNDO SAVEPOINT\" && git reset HEAD~1 --hard
  bclean = "!f() { git branch-merged ${1-master} | xargs git branch -D; }; f"
  la = !git config -l | grep alias | cut -c 7-
  b = !git for-each-ref --sort="-authordate" --format="%(authordate)%09%(objectname:short)%09%(refname)" refs/heads | sed -e "s-refs/heads/--"
  ready = rebase -i master
  ready-root = rebase -i --root

  cob = checkout -b
  s = status -sb
  l = log --graph --pretty=\"format:%C(yellow)%h%C(cyan)%d%Creset %s %C(white)- %an, %ar%Creset\"
  ls = log --pretty=\"format:%C(yellow)%h%C(cyan)%d%C(green) %s %C(white)- %an, %ar%Creset\" --decorate --numstat
  lsb = !git for-each-ref --sort=-committerdate refs/heads/ --format=\"%(HEAD) %(color:red)%(objectname:short)%(color:reset)|%(color:yellow)%(refname:short)%(color:reset)|%(contents:subject)|%(authorname)|(%(color:green)%(committerdate:relative)%(color:reset))\" | column -ts\"|\"
  d = diff --color-words
  df = "!f() { local branch=$(git bn $1); git diff --name-only --diff-filter=d $branch..HEAD; }; f"
  dfo = "!f() { git fo $1 1>&2; git df $1; }; f"
  dffo = "!f() { git ffo $1 1>&2; git df $1; }; f"
  wip = !git add . && git commit -m WIP
  cm = !git add . && git commit -m
  sync = "!f() { git pull --rebase --recurse-submodules=yes origin $(git rev-parse --abbrev-ref ${1-HEAD}); }; f"

  can = commit --amend --no-edit

  ok-branch = "!f() { if [[ $# -eq 2 ]]; then rem=$(git swr $2 || echo $1) refpath=remotes/${rem}/${2##$rem/}; elif git swr $1; then refpath=remotes/$1; else refpath=heads/$1; fi; git show-ref --verify --quiet refs/$refpath && echo ${refpath#*/}; }; f"
  okb = ok-branch
  ok-local-branches = "!f() { echo $* | xargs -n1 git okb; }; f"
  oklb = ok-local-branches
  ok-remotes = !bash -c 'grep -xFf- < <(git remote) <(echo $* | xargs -n1)' git-ok-remotes
  okr = ok-remotes
  origin-ok = "!f() { git okr origin; }; f"
  ok-remote-branches = "!f() { if rem=$(git okr $1); then set -- ${@:2}; else rem=origin; fi; echo $* | xargs -n1 git okb $rem; }; f"
  okrb = ok-remote-branches
  remote-exists = !bash -c '[[ $(grep -Ewvcm1 -f- < <(git remote | sed -e s:$:/?:) <(echo $* | xargs -n1)) = 0 ]]' git-rx
  rx = remote-exists
  rx-any =  !bash -c '[[ $(grep -Ew -f- < <(git remote | sed -e s:$:/?:) <(echo $* | xargs -n1)) = 0 ]]' git-rx-any
  srr = "!f() { git rx $1 && git symbolic-ref refs/remotes/$1/$2; }; f"
  starts-with-remote = "!f() { local head=${1%%/*} rest=${1#*/}; until [[ $head = $1 ]]; do if git rx $head; then break; else head=${head}/${rest%%/*} rest=${rest#*/}; fi; done; git okr $head; }; f"
  swr = starts-with-remote

  rvs = "!f() { if git okr $1 && ! git okrb $1; then rev=$1/${2:-HEAD}; else rev=$1${2:+/$2}; fi; git rev-parse --quiet --verify --abbrev-ref --symbolic-full-name $rev; }; f"

  revu = "!f() { if [[ $# -ge 1 ]]; then ref=$(echo $* | tr [:blank:] /); fi; if rb=$(git okrb $ref); then git rvs $rb; else git rvs ${ref:-HEAD}@{u}; fi; }; f"

  br = "!f() { if [[ -n $2 ]]; then git okr $1; else git swr $(git revu $1); fi; }; f"
  sro = "!f() { git symbolic-ref refs/remotes/origin/$1; }; f"
  bno = "!f() { br=$1${2:+/$2}; git revu $br || git revu origin/$br; }; f"
  rbn = "!f() { rem=$(git br $@); if br=$(git bno $@); then echo ${br##$rem/}; else echo $@; fi }; f"
  bn = rvs

  fsig = "!f() { br=$(git br $@); rbn=$(git rbn $@); lbn=$(git rvs $@); printf '%s %s:%s' $br $rbn ${lbn:-$rbn}; }; f"
  f = "!f() { git fetch $(git fsig $@) --prune; }; f"
  fu = "!f() { git fetch $(git fsig $@) --prune --set-upstream; }; f"
  fo = f
  ff = "!f() { git fetch $(git fsig $@) --prune --force; }; f"
  ffu = "!f() { git fetch $(git fsig $@) --prune --set-upstream --force; }; f"
  ffo = ff
  # ffo = "!f() { local lbranch=$(git rvs $@) rbranch=$(git bn $@) remote=$(git br $@); git fetch $remote $rbranch:$lbranch --prune --force; }; f"
  r = "!f() { git rebase --autosquash -i $(git rbn $@); }; f"
  ro = r
  rebo = ro
  cf = "!f() { local branch=$(git bn $@ || echo $1); git f $branch; git checkout $branch; }; f"
  cff = "!f() { local branch=$(git bn $@ || echo $1); git ff $branch; git checkout $branch; }; f"
  rf = "!f() { git fetch origin $1 || true; local branch=$(git bn $@ || echo $1); git f $branch; git r $branch; }; f"
  rff = "!f() { git fetch origin $1 || true; local branch=$(git bn $@ || echo $1); git ff $branch; git r $branch; }; f"
  cfo = cf
  cffo = cff
  rfo = rf
  rffo = rff

  bdone = "!f() { local branch=$(git rev-parse --abbrev-ref ${1-HEAD}) ; git cf origin/HEAD && git branch -d $branch; }; f"

  bno-old = "!f() { br=$1${2:+/$2}; git rev-parse --quiet --verify --abbrev-ref $br || git rev-parse --quiet --verify --abbrev-ref origin/$br; }; f"
  is-unmerged = "! f() { local branch=$(git rev-parse --abbrev-ref ${1-HEAD}) ; local base=${2-$(git bno-old)} ; echo $(git cherry $base $(git commit-tree $(git rev-parse $branch^{tree}) -p $(git merge-base $base $branch) -m _) | cut -f1 -d' ') $branch; }; f"
  branch-merged = "! f() { git for-each-ref refs/heads/ '--format=%(refname:short)' | xargs -I {} git is-unmerged {} ${1-master} | egrep '^-' | cut -f2 -d' ' ; }; f"

  clean-merged-branches = "!f() { git checkout -q ${1-master} && git branch-merged ${1-master} | xargs -n1 -p git branch -D; }; f"
  bsync = "!f() { git pull --rebase=merges --recurse-submodules=yes origin ${1-master}; }; f"
  upstream = "!f() { git remote add upstream https://github.com/$1.git; }; f"
  syncu = "!f() { git checkout ${1-master} && git fetch upstream && git rebase upstream/master; }; f"

  # bclean = !f() { git branch-merged ${1-master} | xargs git branch -D } f
  # bdone = !f() { local branch=$(git rev-parse --abbrev-ref ${1-HEAD})  git checkout ${1-master} && git sync && git branch -d $branch } f
  # la = !git config -l | grep alias | cut -c 7-
  # b = !git for-each-ref --sort="-authordate" --format="%(authordate)%09%(objectname:short)%09%(refname)" refs/heads | sed -e "s-refs/heads/--"
  # ready = rebase -i master
  # ready-root = rebase -i --root
  # sync = !f() { git pull --rebase --recurse-submodules=yes origin $(git rev-parse --abbrev-ref ${1-HEAD}) } f
  # bsync = !f() { git pull --rebase=merges --recurse-submodules=yes origin ${1-master} } f
  # upstream = !f() { git remote add upstream https://github.com/$1.git } f
  # syncu = !f() { git checkout ${1-master} && git fetch upstream && git rebase upstream/master } f
  # bno = !f() { git rev-parse --abbrev-ref origin/${1-HEAD} } f
  # bn = !f() { if br=$(git bno $1) then echo $br  | cut -d/ -f2- else echo $1 fi } f
  # ro = !f() { git rebase --autosquash -i $(git bno $1) } f
  # rebo = ro
  # fo = !f() { local branch=$(git bn $1) git fetch origin $branch:$branch --prune } f
  # ffo = !f() { local branch=$(git bn $1) git fetch origin $branch:$branch --prune --force } f
  # cfo = !f() { local branch=$(git bn $1) git fo $branch git co $branch } f
  # cffo = !f() { local branch=$(git bn $1) git ffo $branch git co $branch } f
  # rfo = !f() { local branch=$(git bn $1) git fo $branch git rebo $branch } f
  # rffo = !f() { local branch=$(git bn $1) git ffo $branch git rebo $branch } f
  # is-unmerged = ! f() { local branch=$(git rev-parse --abbrev-ref ${1-HEAD})  local base=${2-master}  echo $(git cherry $base $(git commit-tree $(git rev-parse $branch^{tree}) -p $(git merge-base $base $branch) -m _) | cut -f1 -d' ') $branch } f
  # branch-merged = ! f() { git for-each-ref refs/heads/ '--format=%(refname:short)' | xargs -I {} git is-unmerged {} ${1-master} | egrep '^-' | cut -f2 -d' '  } f
  # clean-merged-branches = !f() { git checkout -q ${1-master} && git branch-merged ${1-master} | xargs -n1 -p git branch -D } f
[format]
  pretty = format:%C(blue)%ad%Creset %C(yellow)%h%C(green)%d%Creset %C(blue)%s %C(magenta) [%an]%Creset
[mergetool]
  prompt = false
[mergetool "mvimdiff"]
  cmd="mvim -c 'Gdiff' $MERGED"     # use fugitive.vim for 3-way merge
  keepbackup=false
[merge]
  summary = true
  verbosity = 1
  tool = mvimdiff
[apply]
  whitespace = nowarn
[branch]
  # autosetupmerge = true
  autosetuprebase = remote
[pull]
  rebase = interactive
[push]
  # 'git push' will push the current branch to its tracking branch
  # the usual default is to push all branches
  default = upstream
[core]
  autocrlf = false
  editor = vim
  excludesfile = ~/.yadr/git/gitignore
[init]
  DefaultBranch = main
[advice]
  statusHints = false
[rebase]
  autoSquash = true
  missingCommitsCheck = warn
[diff]
  # Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
  # instead of a/b/c/d as prefixes for patches
  mnemonicprefix = true
	algorithm = patience
  colorMoved = zebra
[rerere]
  # Remember my merges
  # http://gitfu.wordpress.com/2008/04/20/git-rerere-rereremember-what-you-did-last-time/
  enabled = true
[include]
  path = .gitconfig.user
